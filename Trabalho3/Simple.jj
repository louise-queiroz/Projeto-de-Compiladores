PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException, IOException {
    Karloff analisador = new Karloff(new FileInputStream(args[0]));
    analisador.Karloff();
  }

}
PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
|  <VOID: "void">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <PONTOVIRGULA: ";">
| <IGUAL: "=">
| <FLOAT: "float">
| <BOOLEAN: "boolean">
| <PRINTOUT: "printOut">
| <NEWVAR: "newVar">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <READINPUT: "readInput">
| <RETURN: "return">
| <TRUE: "true">
| <FALSE: "false">
| <SOMA: "+">
| <SUBTRACAO: "-">
| <MULTIPLICACAO: "*">
| <DIVISAO: "/">
| <AND: "&">
| <OU: "|">
| <MENOR: "<">
| <MAIOR: ">">
| <IGUALA: "==">
| <VIRGULA: ",">
| <FUN: "fun"> 
}

TOKEN :
{
  <NUM : (["0"-"9"]) + (["."](["0"-"9"])+)>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
}

void Karloff() : {} {
  Main() (Func())* <EOF>
}

// MAIN -> "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
void Main() : {} {
  <VOID> <MAIN> <APARENTESES> <FPARENTESES> <ACHAVES> (VarDecl() SeqComandos())? <FCHAVES>
}

// VARDECL -> "newVar" TIPO TOKEN_id ";" VARDECL | vazio
void VarDecl() : {} {
  <NEWVAR> Tipo() <ID> <PONTOVIRGULA> (VarDeclRest())?
}

void VarDeclRest() : {} {
  VarDecl()
}

// TIPO -> "float" | "boolean"
void Tipo() : {} {
  <FLOAT> | <BOOLEAN>
}

// SEQCOMANDOS -> COMANDO SEQCOMANDOS | vazio
void SeqComandos() : {} {
  (Comando() (SeqComandosRest()))*
}

void SeqComandosRest() : {} {
  Comando()
}

// COMANDO -> TOKEN_id COMANDO'
//    | "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}" ";"
//    | "while" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
//    | "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")" ";"
//    | "return" EXP ";" 
//    | "printOut" "(" EXP ")" ";"
void Comando() : {} {
    <ID> ComandoLinha1()
  | <IF> <APARENTESES> Exp() <FPARENTESES> <THEN> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>
  | <WHILE> <APARENTESES> Exp() <FPARENTESES> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>
  | <RETURN> Exp() <PONTOVIRGULA>
  | <PRINTOUT> <APARENTESES> Exp() <FPARENTESES> <PONTOVIRGULA>
}

void ComandoLinha1() : {} {
  ( <APARENTESES> (ListaExp())? <FPARENTESES> <PONTOVIRGULA> )
| <IGUAL> ComandoLinha2()
}

void ComandoLinha2() : {} {
  Exp() <PONTOVIRGULA>
| <READINPUT> <APARENTESES> <FPARENTESES> <PONTOVIRGULA>
}

// EXP -> "(" EXP OP EXP ")" | FATOR
void Exp() : {} {
  <APARENTESES> Exp() Op() Exp() <FPARENTESES>
| Fator()
}

// FATOR -> TOKEN_id FATOR' | TOKEN_numliteral | "true" | "false"
// FATOR' -> "(" LISTAEXP? ")" | vazio
void Fator() : {} {
  <ID> FatorLinha()
| <NUM>
| <TRUE>
| <FALSE>
}

void FatorLinha() : {} {
  ( <APARENTESES> (ListaExp())? <FPARENTESES> )?
}

// OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
void Op() : {} {
  <SOMA> | <SUBTRACAO> | <MULTIPLICACAO> | <DIVISAO> | <AND> | <OU> | <MENOR> | <MAIOR> | <IGUALA>
}

// LISTAEXP -> EXP ("," EXP)*
void ListaExp() : {} {
  Exp() ( <VIRGULA> Exp() )*
}

// FUNC -> "fun" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC'
// FUNC' -> "fun" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC' | vazio
void Func() : {} {
  <FUN> Tipo() <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> (VarDecl() SeqComandos())? <FCHAVES> (FuncRest())?
}

void FuncRest() : {} {
  Func()
}

// LISTAARG -> TIPO TOKEN_id ("," TIPO TOKEN_id)*
void ListaArg() : {} {
  Tipo() <ID> ( <VIRGULA> Tipo() <ID> )*
}

void ListaArgRest() : {} {
  ( <VIRGULA> Tipo() <ID> ListaArgRest() )?
}
